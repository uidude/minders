rules_version = '2';
service cloud.firestore {  
  // --- SECURITY PARAMS --- //
  // Use these functions to configure security rules with a few params
  // For more complex logic, you can write Firebase rules logic directly above

  // Object mapping database entity type to access rules
  // Currently supported rules are "public" and "owner"
  function RULES() {
    return {
      "user": {"*": ['owner']},
      "profile": {"read": ['public'], "write": ['owner']},
      "minder": {"read": ['parent'], "write": ['parent']},
      "project": {"*": ['owner']},
      "push_tokens": {"*": ['owner']},
      "notification_pref": {"*": ['owner']},
      "allowlist": {"*": []},
      "check_admin": {"*": ['admin']},
      "check_allowlist": {"*": ['public']},
      "check_privacy": {"*": []},
      "allowlist": {"read": ['owner']}
    }
  }

  // Map of object type -> field that is the user ID of owner
  // If doesn't exist, then no access logic can use the logical owner
  // 'id' is a special field that maps to the firestore document id
  function OWNER_FIELDS() {
    return {
      "user": "id",
      "profile": "user",
      "project": "owner",
      "push_tokens": "user",
      "notification_pref": "user",
      "allowlist": "user"
    }
  }
  
  
  // Map of object type -> datastore type of parent
  // and fields that holds the ID of the parent
  function PARENT_FIELDS() {
    return {
      "minder": {"type": "project", "field": "project"}
    }
  }
  
  // Types that require a "checkVersion" field on edits
  function VERSION_CHECKED() {
    return [
      "minder"
    ]
  }

  // Whether to limit access to users in an allowlist
  // Generally this should be true until you are ready for a public launch,
  // or if you are distributing to people where it is infeasible to get
  // an email or phone # in advance
  function enforceAllowlist() {
    return true;
  }

  // Whether admin panel has access to all data by default
  // In early stages this makes sense. As your app grows larger,
  // you'll want a more server-based security model
  function globalAdminAccess() {
    return true;
  }

  // Manually added roles
  // These are OK for local testing and checking in to a private repo
  // during early development, but you should avoid checking in 
  // emails/phone #'s into public repos
  function MANUAL_ROLES() {
    return {
      // Key is email or normalized phone, value is roles
      // Examples:
      // "joe@joeschmoe.com": ['allowlist', 'admin']
      // 
    }
  }

  match /databases/{database}/documents {
    match /instance/{env} {
      match /{entity}/{entityId} {
        allow update: if versionCheck(entity) && canAccess(entity, getResource(), getMethod(), getRoles());
        allow read, create, delete: if canAccess(entity, getResource(), getMethod(), getRoles());   
    

        function versionCheck(entity) {
          let dontCheckVersion = !(entity in VERSION_CHECKED());
          let existingVersion = 'updatedAt' in resource.data ? resource.data.updatedAt : null;
          let versionCheck = 'checkVersion' in request.resource.data ? request.resource.data.checkVersion : null;
          return dontCheckVersion || (versionCheck != null && versionCheck == existingVersion);
        }


        // Multiple identical calls to avoid recursion checks
        // This means that you can only check two parents deep for now
        function canAccess(entity, res, method, roles) {
          return canAccessImpl(entity, res, method, roles) || canAccessParent(entity, res, method, roles);
        }
        function canAccess2(entity, res, method, roles) {
          return canAccessImpl(entity, res, method, roles) || canAccessParent2(entity, res, method, roles);
        }
        function canAccess3(entity, res, method, roles) {
          return canAccessImpl(entity, res, method, roles);
        }


        function canAccessParent(entity, res, method, roles) {
          let rule = getRule(entity, method);
          let parent = getParent(entity, res);
          return 'parent' in rule && canAccess2(parent.type, parent.doc, method, roles);
        }
        function canAccessParent2(entity, res, method, roles) {
          let rule = getRule(entity, method);
          let parent = getParent(entity, res);
          return 'parent' in rule && canAccess3(parent.type, parent.doc, method, roles);
        }


        function getRule(entity, method) {
          let ruleset = RULES()[entity];
          return method in ruleset ? ruleset[method] : '*' in ruleset ? ruleset['*'] : [];
        }
        
        // Access check logic
        function canAccessImpl(entity, res, method, roles) {
          let rule = getRule(entity, method);
          let public = 'public' in rule;
          let allowlisted = !enforceAllowlist() || 'allowlist' in roles;
          let adminAccess = globalAdminAccess() && 'admin' in roles;
          let ownerAccess = 'owner' in rule && isOwner(entity, res);
          let isEmptyRead = method == 'read' && resource == null;
          return allowlisted && (public || ownerAccess || adminAccess || isEmptyRead);
        }

        // Resource for the request
        // Always returns a non-null value to avoid null issues in rules eval
        // TODO: Merge fields as needed
        function getResource() {
          let res = request.method == 'create' ? request.resource : resource;
          return res != null ? res : {"id": null, "data": {}};
        }

        // Method for the request
        function getMethod() {
          return request.method == 'get' || request.method == 'list' ? 'read' : 'write';
        }

        // Get roles for the current user
        // Returns a list of roles
        function getRoles() {
          return datastoreRoles().concat(allowlistRoles()).concat(manualRoles())
        }
        
        // Get a doc from the current db environment
        function getDoc(collection, id) {
          let path = /databases/$(database)/documents/instance/$(env)/$(collection)/$(id);
          return exists(path) ? get(path) : null;
        }
        
        // Get a doc with a defaulra
        function getDocWithFallback(collection, id, fallback) {
          let doc = getDoc(collection, id);
          return doc != null ? doc : fallback;
        }

        // Roles associated with the user record in the datastore
        function datastoreRoles() {
          let userMeta = request.auth != null ? getDoc('usermeta', request.auth.uid) : null;
          let roles = userMeta != null && 'roles' in userMeta.data ? userMeta.data['roles'] : [];
          return roles;
        }

        // Email of the logged in user
        function userEmail() {
          // TODO: Figure out when it needs to be verified
          let email = getOr(getOr(request.auth, 'token', null), 'email', '');
          return email;
        }

        // Phone # of the logged in user. Returns empty string if no phone # for
        // compatibility with emulator.
        function userPhone() {
          let phone = getOr(getOr(request.auth, 'token', null), 'phone_number', '');
          return phone;
        }

        // Returns first non-or empty value, or '' if both are empty
        function firstNonEmpty(a, b) {
          return (a != null && a != '') ? a : (b != null && b != '') ? b : '';
        }

        // Get a key from a map, with a fallback, checking for nulls
        // Helps remove ternary boilerplate
        function getOr(map, key, fallback) {
          let value = key != null && key in map ? map[key] : null;
          return value != null ? value : fallback;
        }

        // Manually added roles
        // These are OK for local testing and checking in to a private repo
        // during early development, but you should avoid checking in 
        // emails/phone #'s into public repos
        function manualRoles() {
          let id = firstNonEmpty(userEmail(), userPhone());
          let manualRoles = MANUAL_ROLES();

          let roles = getOr(manualRoles, id, []);
          return roles;
        }

        // Return roles from looking up matches for email/phone `allowlist` table
        // Allowlist is useful for granting a role *before* the user has
        // created an account.
        function allowlistRoles() {
          let NO_ACCESS = {"data": {"roles": []}};
          let emailEntry = getDocWithFallback('allowlist', 'allowlist:' + userEmail(), NO_ACCESS);
          let phoneEntry = getDocWithFallback('allowlist', 'allowlist:' + userPhone(), NO_ACCESS);
          
          return emailEntry.data.roles.concat(phoneEntry.data.roles);					
        }

        // Is the user the logical "owner" of this data
        function isOwner(entityType, res) {
          let data = res.data;
          let ownerFields = OWNER_FIELDS();
          let field = entityType in ownerFields ? ownerFields[entityType] : 'n/a';

          let owner = field == 'id' ? entityId : field in data ? data[field] : null;
          return request.auth != null && owner == request.auth.uid;
        }
        
        // Get the parent of an entity, or null if no parent
        function getParent(entityType, res) {
          let data = res.data;
          let parentFields = PARENT_FIELDS();
          let parentInfo = entityType in parentFields ? parentFields[entityType] : {"type": '__none', "field": "none"};
          let field = parentInfo.field;
          let parentId = field in data ? data[field] : '__none';
          return {"doc": getDoc(parentInfo.type, parentId), "type": parentInfo.type};
        }
      }
    }
  }
}